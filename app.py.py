# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OC43-YZhfEYoaGcOKWu9m1dx6ugSKMlt
"""

from flask import Flask, request, jsonify
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
import io
import os
import requests
from pyngrok import ngrok  # Make sure pyngrok is installed

app = Flask(__name__)

# Google Drive file ID for the .h5 model (replace with your actual file ID)
MODEL_URL = "https://drive.google.com/file/d/15E0kmEQ1IP5Pbd09ruuV40QiaYuXZVdd/view?usp=drivesdk"

# Path to save the downloaded model
model_path = '/content/model_trained_cnn.h5'

# Function to download the model from Google Drive if not already available
def download_model():
    if not os.path.exists(model_path):
        print("Downloading model from Google Drive...")
        response = requests.get(MODEL_URL, stream=True)
        with open(model_path, 'wb') as file:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    file.write(chunk)
        print("Model downloaded successfully!")
    else:
        print("Model already exists.")

# Download the model if not present
download_model()

# Load the model
model = load_model(model_path)
print("Model loaded successfully!")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get the file from the request
        if 'file' not in request.files:
            return jsonify({'error': 'No file provided'}), 400
        file = request.files['file']

        # Convert the file into an image format
        img = Image.open(io.BytesIO(file.read()))
        img = img.resize((128, 128))  # Resize to match your model input size

        # Preprocess the image to match the input format of the model
        img_array = np.array(img)
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
        img_array = img_array / 255.0  # Normalize if required

        # Perform prediction using the model
        prediction = model.predict(img_array)

        # Convert prediction to yes/no response
        prediction_label = 'yes' if prediction[0][0] > 0.5 else 'no'

        # Return the prediction
        return jsonify({'mask_prediction': prediction_label})

    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Setup ngrok tunnel for public URL
if __name__ == '__main__':
    public_url = ngrok.connect(5000)  # Expose the Flask app on port 5000
    print(f" * ngrok tunnel URL: {public_url}")
    app.run()

from google.colab import files
files.download('app.py')